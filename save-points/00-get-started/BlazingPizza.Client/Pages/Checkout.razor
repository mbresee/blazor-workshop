@page "/checkout"
@inject OrderState OrderState
@inject OrdersClient OrdersClient
@inject NavigationManager NavigationManager

<div class="main">
    <EditForm Model="OrderState.Order.DeliveryAddress" OnValidSubmit="PlaceOrder">
        <div class="checkout-cols">
            <div class="checkout-order-details">
                <h4>Review order</h4>
                <OrderReview Order="OrderState.Order" />
            </div>

            <div class="checkout-delivery-address">
                <h4>Deliver to...</h4>
                <AddressEditor Address="OrderState.Order.DeliveryAddress" />
            </div>
        </div>

        <button type="submit" class="@(IsSubmitting ? "checkout-button btn btn-warning disabled" : "checkout-button btn btn-warning")">
            Place order
        </button>

        <DataAnnotationsValidator />
    </EditForm>
</div>

@code {
    [Parameter]
    public bool IsSubmitting { get; set; }

    async Task PlaceOrder()
    {
        try
        {
            if (!IsSubmitting)
            {
                IsSubmitting = true;
                var newOrderId = await OrdersClient.PlaceOrder(OrderState.Order);
                OrderState.ResetOrder();
                IsSubmitting = false;
                NavigationManager.NavigateTo($"myorders/{newOrderId}");
            }
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
    }
}
